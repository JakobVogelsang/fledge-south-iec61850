#include <config_category.h>
#include "iec61850.hpp"
#include <logger.h>
#include <plugin_api.h>
#include <version.h>

#include <fstream>
#include <iostream>
#include <string>

using namespace std;

typedef void (*INGEST_CB)(void *, Reading);

#define PLUGIN_NAME "iec61850"

/**
 * Default configuration
 */
static const char *default_config = QUOTE({
    "plugin" : {
        "description" : "iec61850 south plugin",
        "type" : "string",
        "default" : PLUGIN_NAME,
        "readonly" : "true"
    },
    "asset" : {
        "description" : "Asset name",
        "type" : "string",
        "default" : "iec61850",
        "displayName" : "Asset Name",
        "order" : "1",
        "mandatory" : "true"
    },
     "protocol_stack" : {
        "description" : "protocol stack parameters",
        "type" : "JSON",
        "displayName" : "Protocol stack parameters",
        "order" : "2",
        "default" : QUOTE({
            "protocol_stack" : {
                "name" : "iec104client",
                "version" : "1.0",
                "transport_layer" : {
                    
                            "connections" : [
                                {     
                                    "srv_ip" : "127.0.0.1",        
                                    "port" : 102          
                                }
                            ]
                }
            }
        })
    }
         
});


/**
 * The 61850 plugin interface
 */
extern "C"
{
    static PLUGIN_INFORMATION info = {
        PLUGIN_NAME,            // Name
        VERSION,                // Version (automaticly generated by mkversion)
        SP_ASYNC | SP_CONTROL,  // Flags - added control
        PLUGIN_TYPE_SOUTH,      // Type
        "1.0.0",                // Interface version
        default_config          // Default configuration
    };

    /**
     * Return the information about this plugin
     */
    PLUGIN_INFORMATION *plugin_info()
    {
        Logger::getLogger()->info("61850 Config is %s", info.config);
        return &info;
    }

    /**
     * Initialise the plugin, called to get the plugin handle
     */
    PLUGIN_HANDLE plugin_init(ConfigCategory *config)
    {
        IEC61850* iec61850 = nullptr;
        Logger::getLogger()->info("Initializing the plugin");

        iec61850 = new IEC61850();

        if (iec61850) {
            if (config->itemExists("asset"))
                iec61850->setAssetName(config->getValue("asset"));
            else
                iec61850->setAssetName("iec 61850");

            if (config->itemExists("protocol_stack") &&
                config->itemExists("exchanged_data") &&
                config->itemExists("tls"))
                iec61850->setJsonConfig(config->getValue("protocol_stack"),
                                      config->getValue("exchanged_data"),
                                      config->getValue("tls"));
        }

        return (PLUGIN_HANDLE)iec61850;
    }

    /**
     * Start the Async handling for the plugin
     */
    void plugin_start(PLUGIN_HANDLE *handle)
    {
        if (!handle) return;

        Logger::getLogger()->info("Starting the plugin");

        auto *iec61850 = reinterpret_cast<IEC61850 *>(handle);
        iec61850->start();
    }

    /**
     * Register ingest callback
     */
    void plugin_register_ingest(PLUGIN_HANDLE *handle, INGEST_CB cb, void *data)
    {
        if (!handle) throw exception();

        auto *iec61850 = reinterpret_cast<IEC61850 *>(handle);
        iec61850->registerIngest(data, cb);
    }

    /**
     * Poll for a plugin reading
     */
    Reading plugin_poll(PLUGIN_HANDLE *handle)
    {
        throw runtime_error(
            "IEC_61850 is an async plugin, poll should not be called");
    }

    /**
     * Reconfigure the plugin
     */
    void plugin_reconfigure(PLUGIN_HANDLE *handle, string &newConfig)
    {
        ConfigCategory config("newConfig", newConfig);
        auto *iec61850 = reinterpret_cast<IEC61850 *>(*handle);

        iec61850->stop();

        if (config.itemExists("protocol_stack") &&
            config.itemExists("exchanged_data") &&
            config.itemExists("tls"))
            iec61850->setJsonConfig(config.getValue("protocol_stack"),
                                  config.getValue("exchanged_data"),
                                  config.getValue("tls"));

        if (config.itemExists("asset"))
        {
            iec61850->setAssetName(config.getValue("asset"));
            Logger::getLogger()->info(
                "61850 plugin restart after reconfigure asset");
            iec61850->start();
        }
        else {
            Logger::getLogger()->error(
                "61850 plugin restart failed");
        }
    }

    /**
     * Shutdown the plugin
     */
    void plugin_shutdown(PLUGIN_HANDLE *handle)
    {
        auto *iec61850 = reinterpret_cast<IEC61850 *>(handle);

        iec61850->stop();
        delete iec61850;
    }

    /**
     * plugin plugin_write entry point
     * NOT USED
     */
    bool plugin_write(PLUGIN_HANDLE *handle, string &name, string &value)
    {
        return false;
    }

    /**
     * plugin plugin_operation entry point
     */
    bool plugin_operation(PLUGIN_HANDLE *handle, string &operation, int count,
                          PLUGIN_PARAMETER **params)
    {
        if (!handle) throw exception();

        auto *iec61850 = reinterpret_cast<IEC61850 *>(handle);

        return true;
    }

}  // extern "C"
